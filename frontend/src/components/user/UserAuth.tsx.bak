// UserAuth.tsx - Authentifizierung und Login
import React, { useState, useEffect } from 'react';
import styled, { keyframes } from 'styled-components';

// Animationen
const glow = keyframes`
  0%, 100% { box-shadow: 0 0 10px #00ffff; }
  50% { box-shadow: 0 0 20px #00ffff, 0 0 30px #00ffff; }
`;

const slideIn = keyframes`
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
`;

// Styled Components f√ºr Auth
const AuthContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 30px;
  background: linear-gradient(145deg, #1a1a2e 0%, #16213e 100%);
  border: 2px solid #00ffff;
  border-radius: 15px;
  animation: ${glow} 3s ease-in-out infinite;
  max-width: 400px;
  margin: 2rem auto;
`;

const AuthTitle = styled.h2`
  color: #00ffff;
  margin-bottom: 20px;
  font-size: 1.8rem;
  text-align: center;
  animation: ${slideIn} 0.5s ease-out;
`;

const AuthForm = styled.form`
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

const InputGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 5px;
`;

const Label = styled.label`
  color: #00ffff;
  font-size: 0.9rem;
  font-weight: 600;
`;

const Input = styled.input`
  padding: 12px 15px;
  background: rgba(0, 0, 0, 0.5);
  border: 2px solid #00ffff;
  border-radius: 8px;
  color: #ffffff;
  font-size: 1rem;
  font-family: 'Orbitron', monospace;
  
  &:focus {
    outline: none;
    border-color: #ff6b9d;
    box-shadow: 0 0 10px rgba(255, 107, 157, 0.3);
  }
  
  &::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }
`;

const AuthButton = styled.button<{ variant?: 'primary' | 'secondary' }>`
  background: ${props => 
    props.variant === 'secondary' 
      ? 'linear-gradient(45deg, #6c757d, #5a6268)' 
      : 'linear-gradient(45deg, #00ffff, #0099cc)'};
  border: none;
  color: white;
  padding: 12px 20px;
  border-radius: 25px;
  font-family: 'Orbitron', monospace;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-top: 10px;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 255, 255, 0.3);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }
`;

const AuthToggle = styled.div`
  text-align: center;
  margin-top: 20px;
  color: #ffffff;
  
  button {
    background: none;
    border: none;
    color: #ff6b9d;
    cursor: pointer;
    text-decoration: underline;
    font-family: inherit;
    
    &:hover {
      color: #00ffff;
    }
  }
`;

const ErrorMessage = styled.div`
  background: rgba(255, 0, 0, 0.1);
  border: 1px solid #ff0000;
  border-radius: 5px;
  padding: 10px;
  color: #ff6666;
  font-size: 0.9rem;
  animation: ${slideIn} 0.3s ease-out;
`;

const SuccessMessage = styled.div`
  background: rgba(0, 255, 0, 0.1);
  border: 1px solid #00ff00;
  border-radius: 5px;
  padding: 10px;
  color: #66ff66;
  font-size: 0.9rem;
  animation: ${slideIn} 0.3s ease-out;
`;

// UserAuth Component
interface User {
  id: string;
  username: string;
  email: string;
  createdAt: Date;
  stats: {
    totalGamesPlayed: number;
    totalScore: number;
    favoriteGame: string;
    highScores: Record<string, number>;
    achievements: string[];
  };
}

interface UserAuthProps {
  onLogin: (user: User) => void;
  onLogout: () => void;
  currentUser: User | null;
}

export const UserAuth: React.FC<UserAuthProps> = ({ onLogin, onLogout, currentUser }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Bereits eingeloggt
  if (currentUser) {
    return (
      <AuthContainer>
        <AuthTitle>üë§ Welcome, {currentUser.username}!</AuthTitle>
        <AuthButton onClick={onLogout}>
          üö™ Logout
        </AuthButton>
      </AuthContainer>
    );
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
    setError('');
    setSuccess('');
  };

  const validateForm = () => {
    if (!formData.username.trim()) {
      setError('Username is required');
      return false;
    }
    
    if (!isLogin && !formData.email.trim()) {
      setError('Email is required');
      return false;
    }
    
    if (!formData.password) {
      setError('Password is required');
      return false;
    }
    
    if (!isLogin && formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return false;
    }
    
    if (!isLogin && formData.password.length < 6) {
      setError('Password must be at least 6 characters');
      return false;
    }
    
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsLoading(true);
    setError('');
    setSuccess('');
    
    try {
      // Simuliere API-Call (hier w√ºrdest du dein Backend ansprechen)
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      if (isLogin) {
        // Login-Logik
        const existingUsers = JSON.parse(localStorage.getItem('retro_gaming_users') || '[]');
        const user = existingUsers.find((u: any) => 
          u.username === formData.username && u.password === formData.password
        );
        
        if (user) {
          const userWithoutPassword = { ...user };
          delete userWithoutPassword.password;
          onLogin(userWithoutPassword);
          setSuccess('Login successful!');
        } else {
          setError('Invalid username or password');
        }
      } else {
        // Register-Logik
        const existingUsers = JSON.parse(localStorage.getItem('retro_gaming_users') || '[]');
        
        if (existingUsers.some((u: any) => u.username === formData.username)) {
          setError('Username already exists');
          return;
        }
        
        const newUser: User & { password: string } = {
          id: Date.now().toString(),
          username: formData.username,
          email: formData.email,
          password: formData.password,
          createdAt: new Date(),
          stats: {
            totalGamesPlayed: 0,
            totalScore: 0,
            favoriteGame: '',
            highScores: {
              snake: 0,
              memory: 0,
              pong: 0,
              tetris: 0
            },
            achievements: []
          }
        };
        
        existingUsers.push(newUser);
        localStorage.setItem('retro_gaming_users', JSON.stringify(existingUsers));
        
        const { password, ...userWithoutPassword } = newUser;
        
        onLogin(userWithoutPassword);
        setSuccess('Registration successful!');
      }
    } catch (err) {
      setError('An error occurred. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContainer>
      <AuthTitle>
        {isLogin ? 'üîê Login' : 'üìù Register'}
      </AuthTitle>
      
      {error && <ErrorMessage>{error}</ErrorMessage>}
      {success && <SuccessMessage>{success}</SuccessMessage>}
      
      <AuthForm onSubmit={handleSubmit}>
        <InputGroup>
          <Label>Username</Label>
          <Input
            type="text"
            name="username"
            value={formData.username}
            onChange={handleInputChange}
            placeholder="Enter your username"
            required
          />
        </InputGroup>
        
        {!isLogin && (
          <InputGroup>
            <Label>Email</Label>
            <Input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              placeholder="Enter your email"
              required
            />
          </InputGroup>
        )}
        
        <InputGroup>
          <Label>Password</Label>
          <Input
            type="password"
            name="password"
            value={formData.password}
            onChange={handleInputChange}
            placeholder="Enter your password"
            required
          />
        </InputGroup>
        
        {!isLogin && (
          <InputGroup>
            <Label>Confirm Password</Label>
            <Input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleInputChange}
              placeholder="Confirm your password"
              required
            />
          </InputGroup>
        )}
        
        <AuthButton type="submit" disabled={isLoading}>
          {isLoading ? '‚è≥ Processing...' : (isLogin ? 'üöÄ Login' : 'üìù Register')}
        </AuthButton>
      </AuthForm>
      
      <AuthToggle>
        {isLogin ? "Don't have an account? " : "Already have an account? "}
        <button type="button" onClick={() => setIsLogin(!isLogin)}>
          {isLogin ? 'Register here' : 'Login here'}
        </button>
      </AuthToggle>
    </AuthContainer>
  );
};